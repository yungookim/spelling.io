// Generated by CoffeeScript 1.6.3
var app, colors, express, nconf, pg, _;

nconf = require('nconf');

express = require('express');

_ = require('underscore');

colors = require('colors');

app = express();

pg = require('pg');

process.env.PWD = process.cwd();

app.configure(function() {
  app.use(express.logger("dev"));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  return app.use(app.router);
});

if (nconf.env().get('NODE_ENV')) {
  console.log('Running Production Mode');
  nconf.env().argv().file(process.env.PWD + '/config.json');
} else {
  console.log('Running Dev Mode'.red);
  nconf.env().argv().file(process.env.PWD + '/devconfig.json');
}

pg.defaults.user = nconf.get('pg_user');

pg.defaults.password = nconf.get('pg_pw');

pg.defaults.database = nconf.get('pg_db');

pg.defaults.host = nconf.get('pg_host');

pg.defaults.poolSize = nconf.get('pg_pool_size' || 10);

app.get('/api/query/en/:query', function(req, res) {
  return pg.connect(function(err, client, done) {
    var statement;
    if (err) {
      res.send(500, 'error');
    }
    if (err) {
      return console.error("could not connect to postgres", err);
    }
    statement = "SELECT word, similarity(word, $1) AS similarity FROM word_table WHERE lang='en' AND word % $1 AND occurrence > 0 ORDER BY similarity DESC LIMIT 3";
    return client.query(statement, [req.params.query], function(err, result) {
      done();
      if (err) {
        return console.error("error running query", err);
      }
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "X-Requested-With");
      return res.send(result.rows);
    });
  });
});

app.listen(nconf.get("port"));

console.log("Running on".green, nconf.get("port"));
